# Django settings for temeisheng_project project.

# Generated by 'django-admin startproject' using Django 5.2.4.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ojj(_wu^d*#5#-c%wxeht=@#pgm0pdr0m&4doi^r_l&+nu%sf_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False # Mantenha como False para produção!

# CORREÇÃO: Adicionando o domínio completo do Heroku aos ALLOWED_HOSTS
ALLOWED_HOSTS = ['.herokuapp.com', '127.0.0.1', 'temeisheng-service-bb7c9e38646d.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', # Sua aplicação principal
    'django_heroku', # <--- ADIÇÃO: Adiciona django_heroku
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # <--- ADIÇÃO: WhiteNoise para servir arquivos estáticos em produção
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'temeisheng_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS agora inclui a pasta de templates base do projeto, se você a criar no futuro
        'DIRS': [BASE_DIR / 'templates'], # Pode ser útil para templates globais
        'APP_DIRS': True, # Permite que o Django procure templates dentro das pastas 'templates' de cada app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Adicionado para debug
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'temeisheng_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# <--- ADIÇÃO: Configuração do banco de dados para produção (Heroku)
# Tenta usar a DATABASE_URL do Heroku, caso contrário, usa a configuração padrão SQLite
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)
# FIM DA ADIÇÃO DO BANCO DE DADOS


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 4}, # Alterado para 4 dígitos como você mencionou
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br' # Alterado para Português do Brasil (ou 'pt-pt' para Portugal)

TIME_ZONE = 'Africa/Luanda' # Definido para Luanda, Angola

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Onde o Django vai procurar os arquivos estáticos durante o desenvolvimento
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
# Onde os arquivos estáticos serão coletados para deployment (não usado em dev)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Media files (User-uploaded content)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Custom User Model
AUTH_USER_MODEL = 'core.User'

# URLs de Autenticação (Django irá usar estas para redirecionamento padrão)
LOGIN_URL = 'login' # Nome da URL para a página de login
LOGIN_REDIRECT_URL = 'menu' # Nome da URL para redirecionar após login bem-sucedido
LOGOUT_REDIRECT_URL = 'login' # Nome da URL para redirecionar após logout bem-sucedido


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações para envio de e-mail (para redefinição de senha, etc.)
# Em desenvolvimento, o Django pode imprimir e-mails no console ou usar um servidor local.
# Para produção, você configuraria um servidor SMTP real.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Envia e-mails para o console (bom para dev)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.seuservidor.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'seu_email@dominio.com'
# EMAIL_HOST_PASSWORD = 'sua_senha_de_email'


# ********** INÍCIO DA ADIÇÃO/MODIFICAÇÃO: Configuração de Logging para Heroku **********
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG', # Manter como DEBUG para capturar tudo no console
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG', # <--- ALTERADO: Para DEBUG para ver todo o logging do Django
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG', # <--- ALTERADO: Para DEBUG para ver detalhes de requisições (erros e sucesso)
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG', # <--- ALTERADO: Para DEBUG para ver queries de banco de dados
            'propagate': False,
        },
        'django.contrib.auth.backends': {
            'handlers': ['console'],
            'level': 'DEBUG', # <--- ALTERADO: Para DEBUG para ver detalhes de autenticação
            'propagate': False,
        },
        'core': { # <--- NOVO: Logger para o seu app 'core'
            'handlers': ['console'],
            'level': 'DEBUG', # Isso é crucial se o erro estiver no seu próprio código do app 'core'
            'propagate': False,
        },
        # Adicione outros loggers específicos se você tiver outros apps ou necessidades
    }
}
# ********** FIM DA ADIÇÃO/MODIFICAÇÃO: Configuração de Logging para Heroku **********


# <--- ADIÇÃO: Configurações do django-heroku (coloque no final do settings.py)
import django_heroku
django_heroku.settings(locals())
# FIM DA ADIÇÃO DO django-heroku
